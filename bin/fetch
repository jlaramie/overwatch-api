#! /app/.heroku/node/bin/node
var startTime = Date.now(),
    endTime = startTime + (5 * 60 * 1000),
    db = require('../app/db/adapter/dynamodb'),
    _ = require('underscore'),
    flat = require('flat'),
    parse = require('../app/parser/profile'),
    cache = require('../app/cache/dynamodb'),
    deepEqual = require('deep-equal'),
    cacheTime = timeout = 60 * 5 * 1000, // 5 minutes.
    lastEvaluatedKey;

var documentClient = db.init({
    aws_access_key_id: process.env.AWS_ACCESS_KEY_ID,
    aws_secret_access_key: process.env.AWS_SECRET_ACCESS_KEY,
    aws_region: process.env.AWS_REGION,
    aws_url: undefined,
});

onInit(documentClient);

function onInit(client) {
    console.log('Running Profile Fetch');
    getQueue(client, 'Overwatch_Profiles_Queue').then(function(profiles) {
        console.log('processing', profiles.length);
        processQueue(client, 'Overwatch_Profiles_Queue', profiles).then(function(results) {
            end(results);
        }, onError);
    });
}

function getQueue(client, tableName, lastEvaluatedKey) {
    var profiles = [];

    return new Promise(function(resolve, reject) {
        client.scan({
            TableName: tableName,
            Limit: 40,
            AttributesToGet: ['username'/*, 'timestamp'*/]
        }).promise().then(function(result) {
            profiles = profiles.concat(result.Items);
            lastEvaluatedKey = result.LastEvaluatedKey;

            if (false && result.Items.length > 0 && result.LastEvaluatedKey) {
                getQueue(client, tableName, result.LastEvaluatedKey).then(function(innerResult) {
                    profiles = profiles.concat(innerResult.Items);
                    resolve(profiles);
                }, reject);
            } else {
                resolve(profiles);
            }
        }, reject);
    });
}


function processQueue(client, tableName, list) {
    var results;

    return new Promise(function(resolve, reject) {
        var key;
        try {
            if (list.length > 0 && Date.now() < endTime) {
                key = list.pop();
                processQueueItem(client, 'Overwatch_Profiles', key).then(function(result) {
                    results = [result];
                    client.delete({ TableName: tableName, Key: key }).promise().then(function() {
                        processQueue(client, tableName, list).then(function(result) {
                            if (result) {
                                results = results.concat(result);
                            }
                            resolve(results);
                        }, function(e) {
                            reject(e);
                        });
                    }, function(e) {
                        reject(e);
                    });
                }, function(e) {
                    reject(e);
                });
            } else {
                resolve(results);
            }
        } catch (e) {
            reject(e);
        }
    });
}

function processQueueItem(client, bucket, key) {
    var username = key.username,
        parts = username.split(':');

    return new Promise(function(resolve, reject) {
        var tag = parts[0],
            platform = parts[1],
            region = parts[2];

        try {
            console.log('processing queue item', key);
            cache.getOrSet('Overwatch_Profiles', ['username', key], undefined, cacheTime, getProfile.bind(null, platform, region, tag), isNewProfile, undefined, function(e, data) {
                console.log('processed queue item', key);
                if (e) {
                    if(e.statusCode === 404) {
                        resolve([!!data, key]);
                    } else {
                        reject(e);
                    }
                } else {
                    resolve([!!data, key]);
                }
            });
        } catch (e) {
            reject(e);
        }
    });
}

function onError(e) {
    console.log('Error');
    end();
}

function end(results) {
    var endTime = Date.now();
    console.log.apply(console, [(endTime - startTime) / 1000].concat(arguments));
    process.exit();
}


function getProfile(platform, region, tag, callback) {
    parse(platform, region, tag).then(function(data) {
        if (callback) {
            callback(null, data);
        }
    }, function(error) {
        if (callback) {
            callback(error);
        }
    });
}

function isNewProfile(oldData, newData) {
    var isNew = false,
        oldCompetitiveStats,
        oldQuickplayStats,
        newCompetitiveStats,
        newQuickplayStats,
        isQuickplayChanged,
        isCompetitiveChanged,
        isRankChanged,
        oldComp = oldData.stats.competitive,
        newComp = newData.stats.competitive,
        oldQuick = oldData.stats.quickplay,
        newQuick = newData.stats.quickplay,
        oldRank = oldData.profile.competitive ? oldData.profile.competitive.rank : 0,
        newRank = newData.profile.competitive ? newData.profile.competitive.rank : 0;

    try {
        oldCompetitiveStats = oldComp && oldComp.careerStats ? oldComp.careerStats.allHeroes : undefined;
        newCompetitiveStats = newComp && newComp.careerStats ? newComp.careerStats.allHeroes : undefined;
        oldQuickplayStats = oldQuick && oldQuick.careerStats ? oldQuick.careerStats.allHeroes : undefined;
        newQuickplayStats = newQuick && newQuick.careerStats ? newQuick.careerStats.allHeroes : undefined;
        isQuickplayChanged = !deepEqual(oldQuickplayStats, newQuickplayStats);
        isCompetitiveChanged = !deepEqual(oldCompetitiveStats, newCompetitiveStats);
        isRankChanged = oldRank !== newRank;

        isNew = isRankChanged || isQuickplayChanged || isCompetitiveChanged;

        console.log('Comparing', isNew, oldData.timestamp, newData.timestamp, isQuickplayChanged, isCompetitiveChanged);
    } catch (error) {
        console.log('Error comparing data', error);
    }

    return isNew;
}
