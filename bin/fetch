#! /app/.heroku/node/bin/node
var startTime = Date.now(),
    endTime = startTime + (5 * 60 * 1000),
    db = require('../app/db/adapter/redis'),
    _ = require('underscore'),
    flat = require('flat'),
    parse = require('../app/parser/profile'),
    cache = require('../app/cache'),
    deepEqual = require('deep-equal'),
    cacheTime = timeout = 60 * 5 * 1000; // 5 minutes.

db.init({
    redis_url: process.env.REDIS_URL
}).then(onInit);

function onInit(client) {
    console.log('Running Profile Fetch');
    getQueue(client, 'Profiles').then(function(list) {
        console.log('processing', list);
        processQueue(client, 'Queue:Profiles', list).then(function(results) {
            end(results);
        }, onError);
    });
}

function getQueue(client, key) {
    return new Promise(function(resolve, reject) {
        console.log('getQueue', key);
        try {
            var commandsToRun = [
                ['smembers', `Queue:${key}`]
            ];

            client.multi(commandsToRun).execAsync().then(function(replies) {
                resolve(replies[0]);
            }).catch(function(e) {
                reject(e);
            });
        } catch (e) {
            reject(e);
        }
    });
}

function processQueue(client, listKey, list) {
    var results;

    return new Promise(function(resolve, reject) {
        var key;
        try {
            if (list.length > 0 && Date.now() < endTime) {
                key = list.pop();
                processQueueItem(client, 'Stats:Profiles', key).then(function(result) {
                    results = [result];
                    client.sremAsync('Queue:Profiles', key).then(function() {
                        processQueue(client, 'Queue:Profiles', list).then(function(result) {
                            if (result) {
                                results = results.concat(result);
                            }
                            resolve(results);
                        }, function(e) {
                            reject(e);
                        });
                    }, function(e) {
                        reject(e);
                    });
                }, function(e) {
                    reject(e);
                });
            } else {
                resolve(results);
            }
        } catch (e) {
            reject(e);
        }
    });
}

function processQueueItem(client, bucket, key) {
    var parts = key.split(':');
    return new Promise(function(resolve, reject) {
        var tag = parts[0],
            platform = parts[1],
            region = parts[2];

        try {
            console.log('processing queue item', key);
            cache.getOrSet(bucket, key, cacheTime, getProfile.bind(null, platform, region, tag), isNewProfile, true, undefined, function(e, data) {
                console.log('processed queue item', key);
                if (e) {
                    if(e.statusCode === 404) {
                        resolve([!!data, key]);
                    } else {
                        reject(e);
                    }
                } else {
                    resolve([!!data, key]);
                }
            });
        } catch (e) {
            reject(e);
        }
    });
}

function onError(e) {
    console.log('Error');
    end();
}

function end(results) {
    var endTime = Date.now();
    console.log.apply(console, [(endTime - startTime) / 1000].concat(arguments));
    process.exit();
}


function getProfile(platform, region, tag, callback) {
    parse(platform, region, tag).then(function(data) {
        if (callback) {
            callback(null, data);
        }
    }, function(error) {
        if (callback) {
            callback(error);
        }
    });
}

function isNewProfile(oldData, newData) {
    var isNew = false,
        oldCompetitiveStats,
        oldQuickplayStats,
        newCompetitiveStats,
        newQuickplayStats,
        isQuickplayChanged,
        isCompetitiveChanged,
        isRankChanged,
        oldComp = oldData.stats.competitive,
        newComp = newData.stats.competitive,
        oldQuick = oldData.stats.quickplay,
        newQuick = newData.stats.quickplay,
        oldRank = oldData.profile.competitive ? oldData.profile.competitive.rank : 0,
        newRank = newData.profile.competitive ? newData.profile.competitive.rank : 0;

    try {
        oldCompetitiveStats = oldComp && oldComp.careerStats ? oldComp.careerStats.allHeroes : undefined;
        newCompetitiveStats = newComp && newComp.careerStats ? newComp.careerStats.allHeroes : undefined;
        oldQuickplayStats = oldQuick && oldQuick.careerStats ? oldQuick.careerStats.allHeroes : undefined;
        newQuickplayStats = newQuick && newQuick.careerStats ? newQuick.careerStats.allHeroes : undefined;
        isQuickplayChanged = !deepEqual(oldQuickplayStats, newQuickplayStats);
        isCompetitiveChanged = !deepEqual(oldCompetitiveStats, newCompetitiveStats);
        isRankChanged = oldRank !== newRank;

        isNew = isRankChanged || isQuickplayChanged || isCompetitiveChanged;

        console.log('Comparing', isNew, oldData.timestamp, newData.timestamp, isQuickplayChanged, isCompetitiveChanged);
    } catch (error) {
        console.log('Error comparing data', error);
    }

    return isNew;
}
